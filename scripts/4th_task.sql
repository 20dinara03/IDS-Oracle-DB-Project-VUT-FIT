BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE CARTITEM CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE PAYMENT CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE Category CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE Product CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE BillingAddress CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE Role CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE "User" CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE EMPLOYEE CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE ADMIN CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE UserAddress CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE UserRole CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE Review CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE "Order" CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE ORDERITEM CASCADE CONSTRAINTS';

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -942 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='create table Category
    (
       id   NUMBER GENERATED BY DEFAULT AS IDENTITY
            constraint "Category_pk"
                primary key,
        name char(512) not null unique
             CONSTRAINT alphabetic_category_name CHECK (REGEXP_LIKE(name, ''^[^0-9]*$''))
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;


DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='create table Product
    (
        id           NUMBER GENERATED BY DEFAULT AS IDENTITY
            constraint "Product_pk"
                primary key,
        name         char(512) not null unique,
        price        float    not null
              CONSTRAINT price_positive CHECK (price > 0),
        category_id  integer   not null
            constraint "Product_Category_id_fkey"
                references Category,
        description  varchar2(1024),
        img_path     char(512),
        restock_date date    default NULL,
        store_count  integer default 0,
        order_count  integer default 0,
        stars        float  default 0
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='create table BillingAddress
    (
        id         NUMBER GENERATED BY DEFAULT AS IDENTITY
            constraint "BillingAddress_pk"
                primary key,
        country    char(512) not null,
        zip        number not null
             CONSTRAINT zip_is_numbers CHECK (REGEXP_LIKE(zip, ''^[[:digit:]]+$'')),
        city       char(512) not null,
        street     char(512) not null,
        house      char(512) not null,
        apartment  char(512)
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='create table Role
    (
        id   NUMBER GENERATED BY DEFAULT AS IDENTITY
            constraint "Role_pk"
                primary key,
        name char(512) not null unique
          CONSTRAINT alphabetic_role_name CHECK (REGEXP_LIKE(name, ''^[^0-9]*$''))
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='create table "User"
    (
        id          NUMBER GENERATED BY DEFAULT AS IDENTITY
            constraint "User_pk"
                primary key,
        name        char(512) not null
          CONSTRAINT alphabetic_user_name CHECK (REGEXP_LIKE(name, ''^[^0-9]*$'')),
        password    char(512) not null,
        second_name char(512),
        email       char(512) not null unique,
        stuff       NUMBER(1)   default 0,
        deleted     NUMBER(1)   default 0
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='create table UserAddress
    (
        -- I hope i do not need to create constraint check fot IDs
        id         NUMBER GENERATED BY DEFAULT AS IDENTITY
            constraint "UserAddress_pk"
                primary key,
        user_id    integer   not null
            constraint "UserAddress_User_id_fkey"
                references "User",
        address_id integer   not null
            constraint "UserAddress_Address_id_fkey"
                references BillingAddress
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='create table UserRole
    (
        -- I hope i do not need to create constraint check fot IDs
        id     NUMBER GENERATED BY DEFAULT AS IDENTITY
            constraint "UserRole_pk"
                primary key,
        user_id integer   not null
            constraint "UserRole_User_id_fkey"
                references "User",
        role_id integer   not null
            constraint "UserRole_Role_id_fkey"
                references Role
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='create table Review
    (
        id          NUMBER GENERATED BY DEFAULT AS IDENTITY
            constraint "Review_pk"
                primary key,
        product_id  integer   not null
            constraint "Review_Product_id_fkey"
                references Product,
        user_id     integer   not null
            constraint "Review_User_id_fkey"
                references "User",
        stars       integer   not null
              CONSTRAINT review_stars_positive CHECK (stars > 0),
        description varchar2(1024)
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='create table CartItem
    (
        id         NUMBER GENERATED BY DEFAULT AS IDENTITY
            constraint "CartItem_pk"
                primary key,
        product_id integer   not null
            constraint "CartItem_Product_id_fkey"
                references Product,
        user_id    integer   not null
            constraint "CartItem_User_id_fkey"
                references "User",
        quantity   integer   not null
              CONSTRAINT cartItem_quantity_positive CHECK (quantity > 0)
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='create table Employee
    (
        user_id     integer   not null,
        position    char(512) not null
          CONSTRAINT alphabetic_employee_position CHECK (REGEXP_LIKE(position, ''^[^0-9]*$'')),
          CONSTRAINT Employee_pk PRIMARY KEY (user_id),
          CONSTRAINT Employee_User_id_fk FOREIGN KEY (user_id) REFERENCES "User" (user_id)
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='CREATE TABLE admin
    (
        employee_id INTEGER NOT NULL,
        CONSTRAINT admin_Employee_id_fkey FOREIGN KEY (employee_id) REFERENCES Employee(user_id),
        CONSTRAINT admin_pk PRIMARY KEY (employee_id)
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='create table Payment
    (
        id          NUMBER GENERATED BY DEFAULT AS IDENTITY
            constraint "OrderProcessing_pk"
                primary key,
        user_id integer   not null
            constraint "Payment_User_id_fkey"
                references "User",
        account_number char(16) not null
              CONSTRAINT payment_account_number_length CHECK (LENGTH(account_number) >= 16),
        expiration_date date not null,
        created_at date not null,
        is_paid NUMBER(1) default 0,
        total_price float not null
              CONSTRAINT payment_totalPrice_positive CHECK (total_price > 0)
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='create table "Order"
    (
        id          NUMBER GENERATED BY DEFAULT AS IDENTITY
            constraint "Order_pk"
                primary key,
        user_id     integer   not null
            constraint "Order_User_id_fkey"
                references "User",
        address_id  integer   not null
            constraint "Order_Address_id_fkey"
                references BillingAddress,
        payment_id  integer   not null
            constraint "Order_Payment_id_fkey"
                references Payment,
        status      char(512) not null,
        processed_by integer
            constraint "OrderProcessing_Employee_id_fkey"
                references Employee,
        shipped_by integer
            constraint "OrderShipping_Employee_id_fkey"
                references Employee,
        total_price float not null
              CONSTRAINT order_totalPrice_positive CHECK (total_price > 0)
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

DECLARE
    sql_stmt clob ;
BEGIN
    sql_stmt:='create table OrderItem
    (
        id         NUMBER GENERATED BY DEFAULT AS IDENTITY
            constraint "OrderItem_pk"
                primary key,
        order_id   integer   not null
            constraint "OrderItem_Order_id_fkey"
                references "Order",
        product_id integer   not null
            constraint "OrderItem_Product_id_fkey"
                references Product,
        quantity      integer   not null
            CONSTRAINT orderItem_quantity_positive CHECK (quantity > 0)
    )';
    EXECUTE IMMEDIATE sql_stmt;

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = -955 THEN
                NULL;
            ELSE
                RAISE;
            END IF;
END;

-- ==== MOCK ==== --
INSERT INTO Category (name) VALUES ('Electronics');
INSERT INTO Category (name) VALUES ('Books');
INSERT INTO Category (name) VALUES ('Home & Garden');
INSERT INTO Category (name) VALUES ('Toys');
INSERT INTO Category (name) VALUES ('Clothing');
INSERT INTO Category (name) VALUES ('Food & Drinks');
INSERT INTO Category (name) VALUES ('Beauty & Personal Care');
INSERT INTO Category (name) VALUES ('Sports & Outdoors');
INSERT INTO Category (name) VALUES ('Music');
INSERT INTO Category (name) VALUES ('Pets');
INSERT INTO Product (name,price,category_id,description,img_path) VALUES ('Smartphone',499.99,1,'High-quality smartphone with advanced features','https://example.com/smartphone.jpg');
INSERT INTO Product (name,price,category_id,description,img_path) VALUES ('Novel',15.99,2,'Fictional book with compelling storyline','https://example.com/novel.jpg');
INSERT INTO Product (name,price,category_id,description,img_path) VALUES ('Sofa',799.99,3,'Comfortable and stylish sofa for your living room','https://example.com/sofa.jpg');
INSERT INTO Product (name,price,category_id,description,img_path) VALUES ('Action Figure',29.99,4,'Collectible action figure from popular movie franchise','https://example.com/action-figure.jpg');
INSERT INTO Product (name,price,category_id,description,img_path) VALUES ('T-Shirt',19.99,5,'Casual and trendy t-shirt for everyday wear','https://example.com/t-shirt.jpg');
INSERT INTO Product (name,price,category_id,description,img_path) VALUES ('Chocolate',4.99,6,'Premium chocolate made from high-quality cocoa beans','https://example.com/chocolate.jpg');
INSERT INTO Product (name,price,category_id,description,img_path) VALUES ('Shampoo',9.99,7,'Natural and nourishing shampoo for all hair types','https://example.com/shampoo.jpg');
INSERT INTO Product (name,price,category_id,description,img_path) VALUES ('Yoga Mat',39.99,8,'Non-slip yoga mat for comfortable and safe practice','https://example.com/yoga-mat.jpg');
INSERT INTO Product (name,price,category_id,description,img_path) VALUES ('Vinyl Record',29.99,9,'Classic vinyl record of a timeless album','https://example.com/vinyl-record.jpg');
INSERT INTO Product (name,price,category_id,description,img_path) VALUES ('Dog Food',24.99,10,'High-quality and nutritious dog food for all breeds and sizes','https://example.com/dog-food.jpg');
INSERT INTO BillingAddress (country,zip,city,street,house) VALUES ('United States','10001','New York','Broadway','123');
INSERT INTO BillingAddress (country,zip,city,street,house) VALUES ('Canada','10001','Toronto','Queen Street West','456');
INSERT INTO BillingAddress (country,zip,city,street,house) VALUES ('United Kingdom','10001','London','Buckingham Palace Road','789');
INSERT INTO BillingAddress (country,zip,city,street,house) VALUES ('Germany','10001','Berlin','Unter den Linden','1011');
INSERT INTO BillingAddress (country,zip,city,street,house) VALUES ('Japan','10001','Chiyoda','Tokyo Station','1213');
INSERT INTO Role (name) VALUES ('Admin');
INSERT INTO Role (name) VALUES ('Employee');
INSERT INTO Role (name) VALUES ('User');
INSERT INTO "User" (name,password,second_name,email,stuff) VALUES ('John','johndoe123','Doe','johndoe@example.com',0);
INSERT INTO "User" (name,password,second_name,email,stuff) VALUES ('Jane','janedoe456','Doe','janedoe@example.com',1);
INSERT INTO "User" (name,password,second_name,email,stuff) VALUES ('Bob','bobsmith789','Smith','bobsmith@example.com',0);
INSERT INTO "User" (name,password,second_name,email,stuff) VALUES ('Alice','alicebrown012','Brown','alicebrown@example.com',1);
INSERT INTO "User" (name,password,second_name,email,stuff) VALUES ('David','davidmiller345','Miller','davidmiller@example.com',0);
INSERT INTO "User" (name,password,second_name,email,stuff) VALUES ('Mary','maryjones678','Jones', 'bob@example.com',0);
INSERT INTO UserRole (user_id,role_id) VALUES (1,3);
INSERT INTO UserRole (user_id,role_id) VALUES (2,2);
INSERT INTO UserRole (user_id,role_id) VALUES (3,3);
INSERT INTO UserRole (user_id,role_id) VALUES (4,1);
INSERT INTO UserRole (user_id,role_id) VALUES (5,3);
INSERT INTO Review (product_id,user_id,stars,description) VALUES (1,1,4,'This product exceeded my expectations!');
INSERT INTO Review (product_id,user_id,stars,description) VALUES (2,2,2,'Not worth the price.');
INSERT INTO Review (product_id,user_id,stars,description) VALUES (3,3,5,'Amazing product, highly recommended!');
INSERT INTO Review (product_id,user_id,stars,description) VALUES (4,4,3,'Decent product, but not the best.');
INSERT INTO Review (product_id,user_id,stars,description) VALUES (5,5,1,'Terrible quality, do not buy!');
INSERT INTO Review (product_id,user_id,stars,description) VALUES (6,1,4,'Great value for the price.');
INSERT INTO Review (product_id,user_id,stars,description) VALUES (7,2,5,'Best product Ive ever used!');
INSERT INTO CartItem (product_id,user_id,quantity) VALUES (1,1,2);
INSERT INTO CartItem (product_id,user_id,quantity) VALUES (2,2,1);
INSERT INTO CartItem (product_id,user_id,quantity) VALUES (3,3,3);
INSERT INTO CartItem (product_id,user_id,quantity) VALUES (4,4,5);
INSERT INTO CartItem (product_id,user_id,quantity) VALUES (5,5,2);
INSERT INTO CartItem (product_id,user_id,quantity) VALUES (6,1,1);
INSERT INTO CartItem (product_id,user_id,quantity) VALUES (7,2,4);
INSERT INTO Payment (user_id,account_number,expiration_date,created_at,is_paid,total_price) VALUES (1,'1234123412341234','31-12-2022','31-12-2021',1,123.45);
INSERT INTO Payment (user_id,account_number,expiration_date,created_at,is_paid,total_price) VALUES (2,'1234123412341234','31-12-2022','31-12-2021',1,67.89);
INSERT INTO Payment (user_id,account_number,expiration_date,created_at,is_paid,total_price) VALUES (3,'1234123412341234','31-12-2022','31-12-2021',1,321.98);
INSERT INTO Payment (user_id,account_number,expiration_date,created_at,is_paid,total_price) VALUES (4,'1234123412341234','31-12-2022','31-12-2021',1,76.54);
INSERT INTO "Order" (user_id,total_price,address_id,payment_id,status) VALUES (1,123.45,1,1,'Pending');
INSERT INTO "Order" (user_id,total_price,address_id,payment_id,status) VALUES (2,67.89,2,1,'Shipped');
INSERT INTO "Order" (user_id,total_price,address_id,payment_id,status) VALUES (3,321.98,3,1,'Delivered');
INSERT INTO "Order" (user_id,total_price,address_id,payment_id,status) VALUES (4,76.54,1,1,'Cancelled');
INSERT INTO "Order" (user_id,total_price,address_id,payment_id,status) VALUES (5,54.32,1,1,'Pending');
INSERT INTO "Order" (user_id,total_price,address_id,payment_id,status) VALUES (1,98.76,2,1,'Shipped');
INSERT INTO "Order" (user_id,total_price,address_id,payment_id,status) VALUES (2,234.56,3,1,'Delivered');
INSERT INTO OrderItem (order_id,product_id,quantity) VALUES (1,3,2);
INSERT INTO OrderItem (order_id,product_id,quantity) VALUES (2,1,1);
INSERT INTO OrderItem (order_id,product_id,quantity) VALUES (3,7,3);
INSERT INTO OrderItem (order_id,product_id,quantity) VALUES (2,1,1);
INSERT INTO OrderItem (order_id,product_id,quantity) VALUES (2,3,1);
INSERT INTO OrderItem (order_id,product_id,quantity) VALUES (5,2,1);
INSERT INTO OrderItem (order_id,product_id,quantity) VALUES (4,5,3);
INSERT INTO OrderItem (order_id,product_id,quantity) VALUES (3,8,2);
INSERT INTO OrderItem (order_id,product_id,quantity) VALUES (2,4,1);
INSERT INTO OrderItem (order_id,product_id,quantity) VALUES (1,6,3);
INSERT INTO OrderItem (order_id,product_id,quantity) VALUES (1,2,2);


-- ##### 4th task ####
-- -=== TRIGGERS ===-
-- trigger that if only employee can be on duty of processing order
CREATE OR REPLACE TRIGGER check_processed_by_employee
AFTER UPDATE OF processed_by ON "Order"
FOR EACH ROW
DECLARE
    user_role_id INTEGER;
BEGIN
    -- Get the role ID for the "employee" role
    SELECT id INTO user_role_id FROM Role WHERE name = 'Employee';

    -- Check if the user who updated the "processed_by" column has the "employee" role
    IF (:NEW.PROCESSED_BY IS NOT NULL) THEN
        SELECT COUNT(*) INTO user_role_id FROM UserRole WHERE user_id = :NEW.PROCESSED_BY AND role_id = user_role_id;
        IF (user_role_id = 0) THEN
            RAISE_APPLICATION_ERROR(-20000, 'The user who updated the "processed_by" column must have the "employee" role.');
        END IF;
    END IF;
END;
/

-- check negative case - when updates table and processed_by is not employee
UPDATE "Order" SET processed_by = 1 WHERE id = 1;

CREATE OR REPLACE TRIGGER check_review_user_role
BEFORE INSERT ON review
FOR EACH ROW
DECLARE
    user_role role.name%TYPE;
BEGIN
    SELECT r.NAME INTO user_role
    FROM USERROLE ur
    JOIN role r ON ur.ROLE_ID = r.ID
    WHERE ur.USER_ID = :NEW.USER_ID;

    IF user_role != 'User' THEN
        RAISE_APPLICATION_ERROR(-20000, 'Only users with the "User" role can create reviews');
    END IF;
END;
/

-- check negative case - when user with role "Employee" tries to create review
INSERT INTO review (product_id, user_id, STARS, DESCRIPTION) VALUES (1, 3, 5, 'Great product!');

-- Tato procedura vypisuje informace o všech objednávkách v databázi, včetně jména zákazníka, celkové ceny a
-- stavu objednávky. Využívá kurzor k procházení tabulky "Order" a proměnnou s datovým typem "Order%ROWTYPE"
-- pro uchování aktuální řádku.

CREATE OR REPLACE PROCEDURE PRINT_ORDERS IS
  CURSOR order_cursor IS
    SELECT * FROM "Order";
  order_row "Order"%ROWTYPE;
  user_name "User".name%TYPE;
  price Payment.total_price%TYPE;
BEGIN
  DBMS_OUTPUT.PUT_LINE('Orders 4:');
  OPEN order_cursor;
  LOOP
    FETCH order_cursor INTO order_row;
    EXIT WHEN order_cursor%NOTFOUND;
    BEGIN
      SELECT name, total_price INTO user_name, price FROM "User" u JOIN Payment p ON u.id = p.id WHERE u.id = order_row.user_id;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        user_name := 'Unknown user';
        price := '-1';
    END;
    DBMS_OUTPUT.PUT_LINE('Order #' || order_row.id || ' by ' || TRIM(user_name) || '. Total price: ' || price ||  ', Status: ' || order_row.status);
  END LOOP;
  CLOSE order_cursor;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    CLOSE order_cursor;
END;

-- Tato procedura aktualizuje stav objednávky na základě zadaného ID objednávky a nového stavu. Využívá kurzor k
-- získání konkrétní objednávky a ošetřuje výjimku, pokud objednávka s daným ID neexistuje
CREATE OR REPLACE PROCEDURE update_order_status(p_order_id IN INTEGER, p_new_status IN VARCHAR2) IS
BEGIN
UPDATE "Order" SET status = p_new_status WHERE id = p_order_id;
DBMS_OUTPUT.PUT_LINE('Order status updated successfully');
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('Error: Order with ID ' || p_order_id || ' does not exist');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

-- BEGIN update_order_status(4, 'processing'); END;

-- === 3 + 4 === -- alespoň jedno použití EXPLAIN PLAN + explicitní vytvoření alespoň jednoho indexu
-- vypis puvodniho planu
EXPLAIN PLAN FOR
SELECT SUM("Order".total_price)
FROM "Order"
JOIN OrderItem ON OrderItem.order_id = "Order".id
WHERE OrderItem.product_id = (SELECT id FROM Product WHERE name = 'Sofa')
GROUP BY "Order".id;

-- optimalizace
CREATE INDEX Order_OrderItem_idx ON "Order" (id, total_price);

-- výpis EXPLAIN PLAN pro kontrolu
EXPLAIN PLAN FOR
SELECT SUM("Order".total_price)
FROM "Order"
JOIN OrderItem ON OrderItem.order_id = "Order".id
WHERE OrderItem.product_id = (SELECT id FROM Product WHERE name = 'Sofa')
GROUP BY "Order".id;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

-- === 5 === ---
GRANT SELECT, INSERT, UPDATE, DELETE ON ADMIN TO xgarip00;
GRANT SELECT, INSERT, UPDATE, DELETE ON BILLINGADDRESS TO xgarip00;
GRANT SELECT, INSERT, UPDATE, DELETE ON CARTITEM TO xgarip00;
GRANT SELECT, INSERT, UPDATE, DELETE ON CATEGORY TO xgarip00;
GRANT SELECT, INSERT, UPDATE, DELETE ON EMPLOYEE TO xgarip00;
GRANT SELECT, INSERT, UPDATE, DELETE ON "Order" TO xgarip00;
GRANT SELECT, INSERT, UPDATE, DELETE ON ORDERITEM TO xgarip00;
GRANT SELECT, INSERT, UPDATE, DELETE ON PAYMENT TO xgarip00;
GRANT SELECT, INSERT, UPDATE, DELETE ON PRODUCT TO xgarip00;
GRANT SELECT, INSERT, UPDATE, DELETE ON REVIEW TO xgarip00;
GRANT SELECT, INSERT, UPDATE, DELETE ON ROLE TO xgarip00;
GRANT SELECT, INSERT, UPDATE, DELETE ON "User" TO xgarip00;
GRANT SELECT, INSERT, UPDATE, DELETE ON USERADDRESS TO xgarip00;
GRANT SELECT, INSERT, UPDATE, DELETE ON USERROLE TO xgarip00;

-- === 6 === -- vytvoření alespoň jednoho materializovaného pohledu patřící druhému členu týmu a používající tabulky
-- definované prvním členem týmu (nutno mít již definována přístupová práva), vč. SQL příkazů/dotazů ukazujících,
-- jak materializovaný pohled funguje,
CREATE MATERIALIZED VIEW xgarip00_employees_names
BUILD IMMEDIATE
REFRESH COMPLETE ON COMMIT
AS
SELECT U.name, E.user_id
FROM "User" U
JOIN Employee E ON U.id = E.user_id;

SELECT * FROM xgarip00_employees_names;

-- === 7 === -- vytvoření jednoho komplexního dotazu SELECT využívajícího klauzuli WITH a operátor CASE.
-- V poznámce musí být uvedeno, jaká data dotaz získává.

-- Dostavame to kolik kupuji nasi produkty nasi Employee.
-- Dotaz používá klauzuli WITH k vytvoření dočasné tabulky s názvem "order_total", která vypočítává celkovou cenu každé
-- objednávky. Následně se dotaz spojí s tabulkami "User", "Employee" a "Order" a pomocí operátoru CASE se zjišťuje,
-- zda je objednávka zrušena nebo ne. Pokud je objednávka zrušena, vrací se hodnota -1, jinak se vrací celková cena
-- objednávky z tabulky "order_total".
WITH order_total AS (
  SELECT "Order".id, SUM(OrderItem.quantity * Product.price) AS total
  FROM "Order"
  JOIN OrderItem ON "Order".id = OrderItem.order_id
  JOIN Product ON OrderItem.product_id = Product.id
  GROUP BY "Order".id
)
SELECT "User".name, Employee.position,
  CASE
    WHEN "Order".STATUS = 'canceled' THEN -1
    ELSE order_total.total
  END AS total_price
FROM "User"
JOIN Employee ON "User".id = Employee.user_id
JOIN "Order" ON "User".id = "Order".user_id
JOIN order_total ON "Order".id = order_total.id;
